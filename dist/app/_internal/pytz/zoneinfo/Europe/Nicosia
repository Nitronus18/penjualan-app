o serialize object.
     */
    static serializeCookieToRequestHeader(cookies) {
        return cookies
            .map((cookie) => `${cookie.name}=${cookie.value}`)
            .join('; ');
    }
}

/**
 * Request context storage used to keep track of request data
 * and calculated rules for it.
 */
class RequestContextStorage {
    /**
     * Map of request context data.
     */
    requestMap = new Map();
    /**
     * Sets requestData context by requestData id.
     * @param requestId Request id.
     * @param requestData Request context data.
     */
    set(requestId, requestData) {
        this.requestMap.set(requestId, requestData);
    }
    /**
     * Updates request context fields. Can be done partially.
     * @param requestId Request id.
     * @param data Partial request context.
     * @returns Updated request context or undefined if request context not found.
     */
    update(requestId, data) {
        const requestContext = this.requestMap.get(requestId);
        if (requestContext) {
            Object.assign(requestContext, data);
            return requestContext;
        }
        return undefined;
    }
    /**
     * Returns request context by request id.
     * @param requestId Request id.
     * @returns Request context or undefined if request context not found.
     */
    get(requestId) {
        return this.requestMap.get(requestId);
    }
    /**
     * Removes non document/subdocument request context from the map by request id.
     * @param requestId Request id.
     */
    delete(requestId) {
        const context = this.requestMap.get(requestId);
        if (!context) {
            return;
        }
        this.requestMap.delete(requestId);
    }
    /**
     * Clears all request context data.
     */
    clear() {
        this.requestMap.clear();
    }
}
const requestContextStorage = new RequestContextStorage();

/**
 * Generic wrapper for browser.webRequest with custom event implementation.
 */
class RequestEvent {
    listeners